{"remainingRequest":"C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\src\\components\\shop\\Problem.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\src\\components\\shop\\Problem.vue","mtime":1723689351661},{"path":"C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\babel.config.js","mtime":1606398810000},{"path":"C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709293572000},{"path":"C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1709293572000},{"path":"C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709293572000},{"path":"C:\\Users\\ADMIN\\Desktop\\MiniProgram\\微信小程序-心理资讯\\psychology_admin_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1709293572000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _defineProperty from \"C:/Users/ADMIN/Desktop/MiniProgram/\\u5FAE\\u4FE1\\u5C0F\\u7A0B\\u5E8F-\\u5FC3\\u7406\\u8D44\\u8BAF/psychology_admin_vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Desktop/MiniProgram/\\u5FAE\\u4FE1\\u5C0F\\u7A0B\\u5E8F-\\u5FC3\\u7406\\u8D44\\u8BAF/psychology_admin_vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nexport default {\n  data: function data() {\n    return {\n      options: [{\n        value: 0,\n        label: '双相情感障碍测试'\n      }, {\n        value: 1,\n        label: '人格测评'\n      }, {\n        value: 2,\n        label: '智力测试'\n      }, {\n        value: 3,\n        label: '职业人格测试'\n      }],\n      isAdd: true,\n      // 是否为新增题目 默认是\n      tableList: [],\n      // 表格数据源\n      isModal: false,\n      // 控制对话框的显示与隐藏\n\n      formSource: {\n        id: null,\n        // 题目id\n        problem_title: '',\n        // 题目名称\n        problem_type: null,\n        problem_option: [{\n          option_name: '',\n          option_score: null\n        }]\n      },\n      // 表单数据\n      rules: {\n        problem_title: [{\n          required: true,\n          message: '题目不能为空!',\n          trigger: 'blur'\n        }],\n        problem_type: [{\n          required: true,\n          message: '请选择题目类型',\n          trigger: 'change'\n        }],\n        problem_option: [{\n          validator: function validator(rule, value, callback) {\n            if (!value || !value.length) {\n              callback(new Error('必须至少添加一个选项'));\n            } else {\n              // Check if all options and scores are valid\n              var _iterator = _createForOfIteratorHelper(value),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var option = _step.value;\n                  if (!option.option_name || option.option_score < 0) {\n                    callback(new Error('所有选项和分数不能为空，且分数必须大于等于0'));\n                    return;\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getTimuList(); // 获取题目\n  },\n  methods: {\n    validateScore: function validateScore(value) {\n      if (value <= 0) {\n        this.item.option_score = ''; // 清空输入框\n        // 或者可以弹出提示\n        this.$message.warning('请输入大于0的数值');\n      }\n    },\n    removeIngredients: function removeIngredients(item) {\n      var index = this.formSource.problem_option.indexOf(item);\n      if (index !== -1) {\n        this.formSource.problem_option.splice(index, 1);\n      }\n    },\n    addIngredients: function addIngredients() {\n      this.formSource.problem_option.push({\n        option_name: '',\n        option_score: null\n      });\n    },\n    getTimuList: function () {\n      var _getTimuList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$this$$http$pos, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.$http.post('getTimuList', {});\n            case 2:\n              _yield$this$$http$pos = _context.sent;\n              res = _yield$this$$http$pos.data;\n              if (res.status === 200) {\n                this.tableList = (res['data'] || []).map(function (item) {\n                  return _objectSpread(_objectSpread({}, item), {}, {\n                    problem_option: JSON.parse(item.problem_option)\n                  });\n                });\n              } else {\n                this.$message.error(res.msg);\n              }\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getTimuList() {\n        return _getTimuList.apply(this, arguments);\n      }\n      return getTimuList;\n    }(),\n    openModal: function openModal(type, data) {\n      var _this = this;\n      this.isAdd = type;\n      this.isModal = true;\n      // 清空表单验证状态\n      this.$nextTick(function () {\n        _this.$refs.formSource.clearValidate();\n      });\n      if (!type) {\n        // 如果是编辑，那么拿一下编辑的内容\n        this.formSource = JSON.parse(JSON.stringify(data));\n      }\n    },\n    // async setClass() {\n    //     let paramsData = {\n    //         ...this.formSource,\n    //         problem_option: JSON.stringify(this.formSource.problem_option)\n    //     };\n    //     if (this.isAdd) {\n    //         // 新增题目\n    //         const {\n    //             data: res\n    //         } = await this.$http.post('addTimuList', paramsData);\n    //         if (res.status === 200) {\n    //             this.isModal = false;\n    //             this.getTimuList();\n    //         } else {\n    //             this.$message.error(res.msg);\n    //         }\n    //     } else {\n    //         // 修改题目\n    //         const {\n    //             data: res\n    //         } = await this.$http.post('updateTimuList', paramsData);\n    //         if (res.status === 200) {\n    //             this.isModal = false;\n    //             this.getTimuList();\n    //         } else {\n    //             this.$message.error(res.msg);\n    //         }\n    //     }\n    // },\n    setClass: function () {\n      var _setClass = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // 先进行表单验证\n              this.$refs.formSource.validate( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(valid) {\n                  var paramsData, _yield$_this2$$http$p, res, _yield$_this2$$http$p2, _res;\n                  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (!valid) {\n                          _context2.next = 24;\n                          break;\n                        }\n                        // 验证通过，准备数据\n                        paramsData = _objectSpread(_objectSpread({}, _this2.formSource), {}, {\n                          problem_option: JSON.stringify(_this2.formSource.problem_option)\n                        });\n                        _context2.prev = 2;\n                        if (!_this2.isAdd) {\n                          _context2.next = 11;\n                          break;\n                        }\n                        _context2.next = 6;\n                        return _this2.$http.post('addTimuList', paramsData);\n                      case 6:\n                        _yield$_this2$$http$p = _context2.sent;\n                        res = _yield$_this2$$http$p.data;\n                        if (res.status === 200) {\n                          _this2.isModal = false;\n                          _this2.getTimuList();\n                        } else {\n                          _this2.$message.error(res.msg);\n                        }\n                        _context2.next = 16;\n                        break;\n                      case 11:\n                        _context2.next = 13;\n                        return _this2.$http.post('updateTimuList', paramsData);\n                      case 13:\n                        _yield$_this2$$http$p2 = _context2.sent;\n                        _res = _yield$_this2$$http$p2.data;\n                        if (_res.status === 200) {\n                          _this2.isModal = false;\n                          _this2.getTimuList();\n                        } else {\n                          _this2.$message.error(_res.msg);\n                        }\n                      case 16:\n                        _context2.next = 22;\n                        break;\n                      case 18:\n                        _context2.prev = 18;\n                        _context2.t0 = _context2[\"catch\"](2);\n                        _this2.$message.error('请求失败，请稍后再试');\n                        console.error(_context2.t0);\n                      case 22:\n                        _context2.next = 25;\n                        break;\n                      case 24:\n                        // 验证失败，提示用户\n                        _this2.$message.error('请检查表单内容');\n                      case 25:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2, null, [[2, 18]]);\n                }));\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function setClass() {\n        return _setClass.apply(this, arguments);\n      }\n      return setClass;\n    }(),\n    removeClass: function removeClass(data) {\n      var _this3 = this;\n      this.$confirm('此操作将无法恢复, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var _yield$_this3$$http$p, res;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this3.$http.post('delTimuList', {\n                id: data.id\n              });\n            case 2:\n              _yield$_this3$$http$p = _context4.sent;\n              res = _yield$_this3$$http$p.data;\n              if (res.status === 200) {\n                _this3.getTimuList();\n              } else {\n                _this3.$message.error(res.msg);\n              }\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))).catch(function () {});\n    },\n    closeModal: function closeModal() {\n      this.formSource = {\n        id: null,\n        problem_title: '',\n        problem_type: null,\n        problem_option: [{\n          option_name: '',\n          option_score: null\n        }]\n      };\n    }\n  }\n};",{"version":3,"names":["data","options","value","label","isAdd","tableList","isModal","formSource","id","problem_title","problem_type","problem_option","option_name","option_score","rules","required","message","trigger","validator","rule","callback","length","Error","_iterator","_createForOfIteratorHelper","_step","s","n","done","option","err","e","f","created","getTimuList","methods","validateScore","item","$message","warning","removeIngredients","index","indexOf","splice","addIngredients","push","_getTimuList","_asyncToGenerator","regeneratorRuntime","mark","_callee","_yield$this$$http$pos","res","wrap","_callee$","_context","prev","next","$http","post","sent","status","map","_objectSpread","JSON","parse","error","msg","stop","apply","arguments","openModal","type","_this","$nextTick","$refs","clearValidate","stringify","setClass","_setClass","_callee3","_this2","_callee3$","_context3","validate","_ref","_callee2","valid","paramsData","_yield$_this2$$http$p","_yield$_this2$$http$p2","_res","_callee2$","_context2","t0","console","_x","removeClass","_this3","$confirm","confirmButtonText","cancelButtonText","then","_callee4","_yield$_this3$$http$p","_callee4$","_context4","catch","closeModal"],"sources":["src/components/shop/Problem.vue"],"sourcesContent":["<template>\r\n<div class=\"list\">\r\n    <!-- 面包屑导航区域 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n        <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n        <el-breadcrumb-item>服务管理</el-breadcrumb-item>\r\n        <el-breadcrumb-item>题目管理</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"8\">\r\n                <el-input placeholder=\"请输入题目\" v-model=\"problem_title\" clearable @clear=\"getTimuList()\">\r\n                    <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"getTimuList\"></el-button>\r\n                </el-input>\r\n            </el-col>\r\n            <el-col :span=\"4\">\r\n                <el-button type=\"primary\" @click=\"openModal(true)\">新增题目</el-button>\r\n            </el-col>\r\n        </el-row>\r\n\r\n        <!-- 题目列表区域 -->\r\n        <el-table :data=\"tableList\" border stripe>\r\n            <el-table-column label=\"序号\" type=\"index\"></el-table-column>\r\n            <el-table-column label=\"题目名称\" prop=\"problem_title\"></el-table-column>\r\n            <el-table-column label=\"操作\" width=\"150px\">\r\n                <template v-slot=\"scope\">\r\n                    <!-- 修改按钮 -->\r\n                    <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"openModal(false, scope.row)\"></el-button>\r\n                    <!-- 删除按钮 -->\r\n                    <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeClass(scope.row)\"></el-button>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n    </el-card>\r\n\r\n    <!-- 新增 & 修改题目内容区域 -->\r\n    <el-dialog :title=\"isAdd ? '新增题目' : '修改题目'\" :visible.sync=\"isModal\" width=\"66%\" @close=\"closeModal\">\r\n        <el-form :model=\"formSource\" ref=\"formSource\" label-width=\"90px\" :rules=\"rules\">\r\n            <el-form-item label=\"题目\" prop=\"problem_title\" label-width=\"160px\" required>\r\n                <el-input v-model=\"formSource.problem_title\" placeholder=\"请输入题目\"></el-input>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"题目类型\" prop=\"problem_type\" label-width=\"160px\" required>\r\n                <el-select v-model=\"formSource.problem_type\" placeholder=\"请选择\">\r\n                    <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"></el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"题目选项\" prop=\"problem_option\" label-width=\"160px\" required>\r\n                <el-form-item \r\n                  style=\"margin-bottom: 8px\" \r\n                  v-for=\"(item, index) in formSource.problem_option\" \r\n                  :label=\"'选项' + (index + 1)\" \r\n                  :key=\"index\" \r\n                  :prop=\"'problem_option.' + index + '.option_name'\" \r\n                  >\r\n                    <el-input v-model=\"item.option_name\" style=\"width: 40%; margin-top: 15px;\" placeholder=\"请输入选项\"></el-input>\r\n                    <span style=\"margin: 0 16px\">分数</span>\r\n                    <el-input \r\n                      type=\"number\" \r\n                      v-model=\"item.option_score\" \r\n                      style=\"width: 40%;\" \r\n                      placeholder=\"请选择分数\" \r\n                      ></el-input>\r\n                    <el-button @click.prevent=\"removeIngredients(item)\" style=\"margin-left: 10px;margin-top: 15px\">\r\n                        删除\r\n                    </el-button>\r\n                </el-form-item>\r\n                <el-form-item>\r\n                    <el-button style=\"margin-left: 90px; margin-top:15px\" @click=\"addIngredients\">\r\n                        新增选项\r\n                    </el-button>\r\n                </el-form-item>\r\n            </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button type=\"primary\" @click=\"setClass\">确 定</el-button>\r\n        </span>\r\n    </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            options: [{\r\n                    value: 0,\r\n                    label: '双相情感障碍测试'\r\n                },\r\n                {\r\n                    value: 1,\r\n                    label: '人格测评'\r\n                },\r\n                {\r\n                    value: 2,\r\n                    label: '智力测试'\r\n                },\r\n                {\r\n                    value: 3,\r\n                    label:'职业人格测试'\r\n                }\r\n            ],\r\n            isAdd: true, // 是否为新增题目 默认是\r\n            tableList: [], // 表格数据源\r\n            isModal: false, // 控制对话框的显示与隐藏\r\n\r\n            formSource: {\r\n                id: null, // 题目id\r\n                problem_title: '', // 题目名称\r\n                problem_type: null,\r\n                problem_option: [{\r\n                    option_name: '',\r\n                    option_score: null\r\n                }]\r\n            }, // 表单数据\r\n            rules: {\r\n                problem_title: [{\r\n                    required: true,\r\n                    message: '题目不能为空!',\r\n                    trigger: 'blur'\r\n                }],\r\n                problem_type: [{\r\n                    required: true,\r\n                    message: '请选择题目类型',\r\n                    trigger: 'change'\r\n                }],\r\n                problem_option: [\r\n                {\r\n                  validator: (rule, value, callback) => {\r\n                    if (!value || !value.length) {\r\n                      callback(new Error('必须至少添加一个选项'));\r\n                    } else {\r\n                      // Check if all options and scores are valid\r\n                      for (const option of value) {\r\n                        if (!option.option_name || option.option_score < 0) {\r\n                          callback(new Error('所有选项和分数不能为空，且分数必须大于等于0'));\r\n                          return;\r\n                        }\r\n                      }\r\n                      callback();\r\n                    }\r\n                  },\r\n                  trigger: 'blur'\r\n                }\r\n              ]\r\n            }\r\n        };\r\n    },\r\n    created() {\r\n        this.getTimuList(); // 获取题目\r\n    },\r\n    methods: {\r\n        validateScore(value) {\r\n            if (value <= 0) {\r\n                this.item.option_score = ''; // 清空输入框\r\n                // 或者可以弹出提示\r\n                this.$message.warning('请输入大于0的数值');\r\n            }\r\n        },\r\n        removeIngredients(item) {\r\n            const index = this.formSource.problem_option.indexOf(item);\r\n            if (index !== -1) {\r\n                this.formSource.problem_option.splice(index, 1);\r\n            }\r\n        },\r\n        addIngredients() {\r\n            this.formSource.problem_option.push({\r\n                option_name: '',\r\n                option_score: null\r\n            });\r\n        },\r\n        async getTimuList() {\r\n            const {\r\n                data: res\r\n            } = await this.$http.post('getTimuList', {});\r\n            if (res.status === 200) {\r\n                this.tableList = (res['data'] || []).map((item) => ({\r\n                    ...item,\r\n                    problem_option: JSON.parse(item.problem_option)\r\n                }));\r\n            } else {\r\n                this.$message.error(res.msg);\r\n            }\r\n        },\r\n        openModal(type, data) {\r\n            this.isAdd = type;\r\n            this.isModal = true;\r\n            // 清空表单验证状态\r\n            this.$nextTick(() => {\r\n              this.$refs.formSource.clearValidate();\r\n            });\r\n            if (!type) {\r\n                // 如果是编辑，那么拿一下编辑的内容\r\n                this.formSource = JSON.parse(JSON.stringify(data));\r\n            }\r\n        },\r\n        // async setClass() {\r\n        //     let paramsData = {\r\n        //         ...this.formSource,\r\n        //         problem_option: JSON.stringify(this.formSource.problem_option)\r\n        //     };\r\n        //     if (this.isAdd) {\r\n        //         // 新增题目\r\n        //         const {\r\n        //             data: res\r\n        //         } = await this.$http.post('addTimuList', paramsData);\r\n        //         if (res.status === 200) {\r\n        //             this.isModal = false;\r\n        //             this.getTimuList();\r\n        //         } else {\r\n        //             this.$message.error(res.msg);\r\n        //         }\r\n        //     } else {\r\n        //         // 修改题目\r\n        //         const {\r\n        //             data: res\r\n        //         } = await this.$http.post('updateTimuList', paramsData);\r\n        //         if (res.status === 200) {\r\n        //             this.isModal = false;\r\n        //             this.getTimuList();\r\n        //         } else {\r\n        //             this.$message.error(res.msg);\r\n        //         }\r\n        //     }\r\n        // },\r\n        async setClass() {\r\n          // 先进行表单验证\r\n          this.$refs.formSource.validate(async (valid) => {\r\n            if (valid) {\r\n              // 验证通过，准备数据\r\n              let paramsData = {\r\n                ...this.formSource,\r\n                problem_option: JSON.stringify(this.formSource.problem_option)\r\n              };\r\n\r\n              try {\r\n                if (this.isAdd) {\r\n                  // 新增题目\r\n                  const { data: res } = await this.$http.post('addTimuList', paramsData);\r\n                  if (res.status === 200) {\r\n                    this.isModal = false;\r\n                    this.getTimuList();\r\n                  } else {\r\n                    this.$message.error(res.msg);\r\n                  }\r\n                } else {\r\n                  // 修改题目\r\n                  const { data: res } = await this.$http.post('updateTimuList', paramsData);\r\n                  if (res.status === 200) {\r\n                    this.isModal = false;\r\n                    this.getTimuList();\r\n                  } else {\r\n                    this.$message.error(res.msg);\r\n                  }\r\n                }\r\n              } catch (error) {\r\n                this.$message.error('请求失败，请稍后再试');\r\n                console.error(error);\r\n              }\r\n            } else {\r\n              // 验证失败，提示用户\r\n              this.$message.error('请检查表单内容');\r\n            }\r\n          });\r\n        },\r\n        removeClass(data) {\r\n            this.$confirm('此操作将无法恢复, 是否继续?', '提示', {\r\n                    confirmButtonText: '确定',\r\n                    cancelButtonText: '取消', \r\n                    type: 'warning'\r\n                })\r\n                .then(async () => {\r\n                    const {\r\n                        data: res\r\n                    } = await this.$http.post('delTimuList', {\r\n                        id: data.id\r\n                    });\r\n                    if (res.status === 200) {\r\n                        this.getTimuList();\r\n                    } else {\r\n                        this.$message.error(res.msg);\r\n                    }\r\n                })\r\n                .catch(() => {});\r\n        },\r\n        closeModal() {\r\n            this.formSource = {\r\n                id: null,\r\n                problem_title: '',\r\n                problem_type: null,\r\n                problem_option: [{\r\n                    option_name: '',\r\n                    option_score: null\r\n                }]\r\n            };\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n/* 可以在此处添加样式 */\r\n</style>\r\n"],"mappings":"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","ignoreList":[]}]}